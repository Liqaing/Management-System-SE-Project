// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  id         Int       @id @default(autoincrement())
  username   String    @db.VarChar(255)
  password   String    @db.VarChar(255)
  telephone  String    @unique @db.VarChar(255)
  userImage  Bytes?    @db.ByteA
  createById Int?
  createAt   DateTime? @default(now())
  createBy   String?   @db.VarChar(255)

  role   role @relation(fields: [roleId], references: [id])
  roleId Int
}

model role {
  id          Int     @id @default(autoincrement())
  roleName    String  @unique @db.VarChar(50)
  description String? @db.VarChar
  user        users[]
}

model category {
  id           Int       @id @default(autoincrement())
  categoryName String    @unique @db.VarChar(255)
  description  String?   @db.VarChar
  createById   Int?
  createBy     String?   @db.VarChar(255)
  createAt     DateTime? @default(now())
  updateById   Int?
  updateAt     DateTime?
  updateBy     String?   @db.VarChar(255)
  product      product[]
}

model product {
  id           Int            @id @default(autoincrement())
  productName  String         @db.VarChar(300)
  description  String?        @db.VarChar
  price        Decimal        @db.Decimal
  qty          Int            @default(0) @db.Integer
  createById   Int?
  createBy     String?        @db.VarChar(255)
  createAt     DateTime?      @default(now())
  updateById   Int?
  updateBy     String?        @db.VarChar(255)
  updateAt     DateTime?
  categoryId   Int
  category     category       @relation(fields: [categoryId], references: [id])
  productImage productImage[]
}

model productImage {
  id        Int     @id @default(autoincrement())
  image     Bytes   @db.ByteA
  product   product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
}

model coupon {
  id            Int       @id @default(autoincrement())
  couponCode    String    @db.VarChar(6)
  status        String    @db.VarChar(50)
  effectiveDate DateTime
  expireDate    DateTime
  limitUsange   Int
  createById    Int?
  createBy      String?   @db.VarChar(255)
  createAt      DateTime? @default(now())
  updateById    Int?
  updateBy      String?   @db.VarChar(255)
  updateAt      DateTime?
}
